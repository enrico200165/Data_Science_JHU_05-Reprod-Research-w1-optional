a5 <- svd1$u[,1:5] %*%  diag(svd1$d[1:5])  %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*%
| t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
skip()
skip()
skip()
.libPaths()
swirl()
dim(ssd)
names(ssd[ , 562,563])
names(ssd[ , c(562,563)])
table(ssd$subject)
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,c(1:12)])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[ ,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col =  unclass(sub1$activity))
svd1 <- svd(scale(sub1[ , -c(562,563) ]))
dim(svd1$u)
maxCon <- whixh.max(svd1$v)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
mpclust(hclustering, lab.col = unclass(sub1$activity))
mypclust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster,sub1$activity)
table(kClust$cluster,sub1$activity, nstart = 100)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[ , 1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
?read.table
?load()
?readRDS
swirl()
pm0
bye()
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
2
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
7
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, , xlab = "Row", ylab = "First left singular vector",
pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
swirl()
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
?”[“
?[
?'['
?mapply
?group_by
library(dplyr)
?group_by
x <- 1:10
f <- factor(rep("a",5), rep("b",5))
f <- factor("a", "b")
f <- factor(c(rep("a",5),rep("b",5))
)
f
splitted <- split(x,f)
splitted
str(splitted)
?expression
library(swirl)
rm(list=ls())
library(swirl)
swir()
swirl()
delete_progress("Mark")
delete_progress("enrico200165")
swirl()
install_from_swirl("Statistical Inference")
?readRDS
seq(0,1,5)
seq(0,1,0.2)
length(seq(0,1,0.2))
duration = faithful$eruptions     # the eruption durations
quantile(duration, seq(0,1,0.1)
)
x <- 1:10
f <- factor(rep(1,2,5))
f
f <- factor(rep(1:2,5))
f
f <- factor(rep(c(1,2),5))
f
f <- factor(rep(c(1,2),each = 5))
f
c <- cut(x,f)
c <- cut(x,breaks = c(1,2))
c
x
c <- cut(x,breaks = c(3,6))
c
c <- cut(x,breaks = c(0,3,6,10))
c
x <- 1:20
c <- cut(x,breaks = c(0,5,10,15,20))
c
str(c)
c <- cut(x,breaks = c(0,5,10,15,20)); c
?which
?group?by
?group_by
library(dplyr)
?group_by
?summarise
?summary
boxplot(pollution$pm25, col = "blue")
library(datasets)
boxplot(pollution$pm25, col = "blue")
setwd("V:/data/pers_dev/sources/R/jhu")
setwd("V:/data/pers_dev/sources/R/jhu/04_ExploratoryDataAnalays/week1")
class <- c("numeric", "character", "factor", "numeric", "numeric")
pollution <- read.csv("data/avgpm25.csv", colClasses = class)
pollution
head(pollution)
boxplot(pollution$pm25, col = "blue")
?map
??map
?devices
?Devices
?par
pal <- colorRamp(c("red", "green", blue"))
pal <- colorRamp(c("red", "green", blue"))
)
)
pal <- colorRamp(c("red", "green", "blue"))
pal
pal(0)
pal(1)
pal(2)
pal <- colorRamp(c("green", "blue"))
pal(1)
pal(0)
pal(0.1)
pal(seq(0,1, len = 257))
pal(seq(0,1, len = 258))
pal(seq(0,1, len = 256))
x <- pal(seq(0,1, len = 256))
rbind(head(x),tail(x))
head(x)
tail(x)
pal <- colorRampPalette(c("green", "blue"))
pal(256)
pal <- colorRamp(c(green", "blue"))
pal <- colorRamp(c("green", "blue"))
x <- pal(256)
l <- list(x)
l
x
x <- pal(0,1,256)
x <- pal(seq(0,1, len = 256))
x
x <- pal(seq(0,1, len = 256))
x
l <- list(x)
l
sapply(l, function(p) { paste(as.hexmode(p[1]))} )
lapply(l, function(p) { paste(as.hexmode(p[1]))} )
lapply(x, function(p) { paste(as.hexmode(p[1]))} )
lapply(l, function(p) { print(paste(as.hexmode(p[1]),as.hexmode(p[2]))} )
lapply(x, function(p) { print(p)} )
lapply(l, function(p) { print(p)} )
lapply(l, function(p) { print(paste("ecco",p)} )
lapply(l, function(p) { print(paste("ecco",p))} )
lapply(l, function(p) { print(paste("ecco",as.hexmode(p))} )
lapply(l, function(p) { print(paste("ecco",as.hexmode(p)))} )
lapply(l, function(p) { print(paste("ecco",as.hexmode(p[1])))} )
lapply(l, function(p) { print(str(p))} )
l
l
x
str(x)
newL <- list()
for(riga : nrow(x)) { print(riga)}
for(riga : 1:nrow(x)) { print(riga)}
for(riga in x) { print(riga)}
for(riga in x) { print(riga[1])}
for(riga in x) { print(riga[2])}
for(riga in x) { print(riga[3])}
for(riga in x) { print(class(riga)}
for(riga in x) { print(class(riga)}
for(riga in x) { print(class(riga))}
for(riga in x) { print(length(riga))}
x
x[256]
x[1]
x[1,1]
x[1,2]
x[1,3]
x[1,0]
x[256,0]
x[256,1]
x[256,2]
x[256,3]
for(riga in rows(x)) { print(length(riga))}
for(i in nrows(x)) { print(riga[i])}
for(i in nrow(x)) { print(riga[i])}
for(i in nrow(x)) { print(x[i])}
nrow(x)
for(i in 1:nrow(x)) { print(x[i])}
nrow(x)
for(i in 1:nrow(x)) { print(x[i,])}
for(i in 1:nrow(x)) { print(x[i,]); }
ls()
l <- list()
l <- vector("list", 256)
for(i in 1:nrow(x)) { l[[i]] <- x[i,]); }
for(i in 1:nrow(x)) { l[[i]] <- x[i,]; }
l
str(x)
for(i in 1:nrow(x)) { print(x[i,])}
for(i in 1:nrow(x)) { l[[i]]  <- x[i,])}
for(i in 1:nrow(x)) { l[[i]]  <- x[i,]}
l
tapply(x, 1, function(p) { print(paste(p[1],p[2],p[3]))} )
?tapply
apply(x, 1, function(p) { print(paste(p[1],p[2],p[3]))} )
apply(x, 1, function(p) { print(paste(p[1],p[2],p[3]."\n"))} )
apply(x, 1, function(p) { print(paste(p[1],p[2],p[3],"\n"))} )
apply(x, 1, function(p) { print(paste(p[1],p[2],p[3],"\\n"))} )
apply(x, 1, function(p) { println(paste(p[1],p[2],p[3]))} )
apply(x, 1, function(p) { print(paste(p[1],p[2],p[3]))} )
apply(x, 1, function(p) { print(paste(p[1],p[2],p[3]))} )
str(x)
apply(x, 1, function(p) { print(paste(p[1],p[2],p[3]))} )
apply(x, 1, function(p) { print(paste(p[1],p[2],as.hexmode(p[3]))} )
apply(x, 1, function(p) { print(paste(p[1],p[2],as.hexmode(p[3])} )
apply(x, 1, function(p) { print(paste(p[1],p[2],as.hexmode(p[3])} )
apply(x, 1, function(p) { print(paste(p[1],p[2],as.hexmode(p[3]))} )
apply(x, 1, function(p) { print(paste(p[1],p[2],as.hexmode(p[3])))} )
?diag
x <- c(1,2,3)
diag(x)
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x=x, y=y)
dist(dataFrame)
rdistxy <- as.matrix(dist(dataFrame))
rdistxy
dist(dataFrame)
rdistxy <- as.matrix(dist(dataFrame))
rdistxy
rdistxy <- as.matrix(dist(dataFrame))
## Remove the diagonal from consideration
# must do this because as.matrix(), from the diagonal matrix produced by dist()
# creates a full (simmetric) matrix with diagonal set to 0
diag(rdistxy) <- diag(rdistxy) + 100000
# Find the index of the points with minimum distance
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
ind
min(rdistxy)
which(rdistxy == min(rdistxy)
)
rdistxy[54]
rdistxy[65]
?which
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
points(x[ind[1, ]], y[ind[1, ]], col = "orange", pch = 19, cex = 2)
x[ind[1, ]]
library(dplyr)
hcluster <- dist(dataFrame) %>% hclust
dendro <- as.dendrogram(hcluster)
cutDendro <- cut(dendro, h = (hcluster$height[1] + 0.00001))
plot(cutDendro$lower[[11]], yaxt = "n", main = "Begin building tree")
?outer
setwd("V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign")
data
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
data
str(data)
lcear()
clear()
str(data)
str(data)
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
unique(data$Provider.State)
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
ny
head(ny)
with(ny,plot(Average.Covered.Charges, Average.Total.Payments))
line(abline(lm(Average.Covered.Charges, Average.Total.Payments)))
with(ny,line(abline(lm(Average.Covered.Charges, Average.Total.Payments))))
with(ny,line(abline(lm(Average.Covered.Charges ~ Average.Total.Payments))))
with(ny,line(abline(lm(  Average.Total.Payments ~ Average.Covered.Charges ))))
with(ny,line(abline(lm(Average.Total.Payments ~ Average.Covered.Charges ))))
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
ny <- complete.cases( ny[  , c("Average.Covered.Charges", "Average.Total.Payments")])
c("Average.Covered.Charges", "Average.Total.Payments") ]
ny[ c("Average.Covered.Charges", "Average.Total.Payments") ]
names(ny)
ny <- filter(data, Provider.State == 'NY')
names(ny)
match(ny,"Average.Covered.Charges")
wich(ny,"Average.Covered.Charges")
which(ny,"Average.Covered.Charges")
which(names(ny),"Average.Covered.Charges")
which(names(ny) == "Average.Covered.Charges")
which(names(ny) == "Average.Total.Payments")
match(names(ny),"Average.Covered.Charges")
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
c(which(names(ny) == "Average.Covered.Charges"),
which(names(ny) == "Average.Total.Payments"))
which(names(ny) == "Average.Total.Payments")
which(names(ny) == "Average.Covered.Charges")
which(names(ny) == "Average.Covered.Charges")
names(ny)
ny <- filter(data, Provider.State == 'NY')
c(which(names(ny) == "Average.Covered.Charges"),
which(names(ny) == "Average.Total.Payments"))
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
nyc
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
nyc
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
ny <- filter(data, Provider.State == 'NY')
colsToCheck <- c(which(names(ny) == "Average.Covered.Charges"),
which(names(ny) == "Average.Total.Payments"))
nyc <- ny[complete.cases( ny[  , colsToCheck])]
ny <- filter(data, Provider.State == 'NY')
ny
colsToCheck <- c(which(names(ny) == "Average.Covered.Charges"),
which(names(ny) == "Average.Total.Payments"))
colsToCheck
nyc <- ny[complete.cases( ny[  , colsToCheck])]
nyc <- ny[complete.cases( ny[  , c(10,11)])]
ny[  , c(10,11)]
complete.cases( ny[  , c(10,11)])
ny[complete.cases( ny[  , c(10,11)]),   ]
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
nyc
?lm
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
?lm
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
unique(data$DRG.Definition)
unique(data$Provider.State)
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
head(dataSub)
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1.R')
ny <- filter(data, Provider.State == 'NY')
data
head(data)
head(data[ Provide.State == "NY", ])
head(data[ data$Provide.State == "NY", ])
data[ data$Provide.State == "NY", ]
data$Provider.State
data[ Provide.State == "NY", ]
data[ data$Provide.State == "NY", ]
data[ data$Provide.State == 'NY', ]
data[ data$Provide.State = 'NY', ]
data[ data$Provide.State == 'NY' ]
data$Provide.State == 'NY'
data[ data$Provider.State = 'NY', ]
data[ data$Provider.State == 'NY', ]
str(data)
group_by(data, Provider.State, FUN = mean)
group_by(data, Provider.State, mean)
?group_by
group_by(data, Provider.State) %>% summarize(Average.Covered.Charges,mean)
group_by(data, Provider.State) %>% summarize(mean)
group_by(data, Provider.State)
str(data)
dataGrp <- group_by(data, Provider.State)
str(dataGrp)
?summarize
dataGrp <- group_by(data, Provider.State)
summarize(dataGrp)
summarize(dataGrp, mean(Average.Covered.Charges))
summarize(dataGrp, totCharges = mean(Average.Covered.Charges))
summarize(dataGrp, totCharges = mean(Average.Covered.Charges), paym = mean( Average.Total.Payments))
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1_v01.R')
source('V:/data/pers_dev/sources/R/jhu/05_reprodResearch/w1/opt-assign/w1optional1_v01.R')
medie
